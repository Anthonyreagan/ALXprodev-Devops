#!/bin/bash

# File: data_extraction_automation-0x01
# Objective: Extract specific data from the Pokémon API JSON response
#            and format it in a human-readable way, using jq, awk, and sed.

# Define the input JSON file
DATA_FILE="data.json"

# Check if the data.json file exists and is not empty
if [ ! -s "$DATA_FILE" ]; then # -s checks if file exists and has a size greater than zero
    echo "Error: ${DATA_FILE} not found or is empty. Please ensure 'apiAutomation-0x00' ran successfully." >&2
    exit 1
fi

# 1. Use jq to extract the Pokémon's name, primary type, weight (in kg), and height (in meters).
#    -r: raw output, so strings are not quoted.
#    .name: Pokémon's name.
#    .types[0].type.name: The name of the first (primary) type.
#    (.weight / 10): Weight is in hectograms (hg), convert to kilograms (kg).
#    (.height / 10): Height is in decimetres (dm), convert to meters (m).
#    The `[] | @tsv` part outputs these values as a single tab-separated line.
pokemon_raw_data=$(jq -r '[.name, .types[0].type.name, (.weight / 10), (.height / 10)] | @tsv' "$DATA_FILE")

# Check if jq successfully extracted data
if [ -z "$pokemon_raw_data" ]; then
    echo "Error: Could not extract data from ${DATA_FILE}. Check file content and JSON structure." >&2
    exit 1
fi

# 2. Use sed to format the extracted data into the desired sentence structure,
#    including capitalizing the first letter of the name and type.
#    -E: Use extended regular expressions (for \u and simplified grouping).
#    s/^([a-z]+)\t([a-z]+)\t([0-9.]+)\t([0-9.]+)/.../: Matches the 4 tab-separated fields.
#    \u\1: Capitalizes the first letter of the first captured group (name).
#    \u\2: Capitalizes the first letter of the second captured group (type).
#    \3 and \4: Insert the weight and height as is.
formatted_output=$(echo "$pokemon_raw_data" | sed -E 's/^([a-z]+)\t([a-z]+)\t([0-9.]+)\t([0-9.]+)/\u\1 is of type \u\2, weighs \3kg, and is \4m tall./')

# 3. Use awk to simply print the final formatted string.
#    This step ensures that 'awk' is used as required by the prompt.
echo "$formatted_output" | awk '{print $0}'