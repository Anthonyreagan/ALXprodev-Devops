#!/bin/bash

# File: data_extraction_automation-0x01
# Objective: Extract specific data from the PokÃ©mon API JSON response
#            and format it in a human-readable way, using jq, awk, and sed.

# Define the input JSON file
DATA_FILE="data.json"

# Check if the data.json file exists and is not empty
if [ ! -s "$DATA_FILE" ]; then # -s checks if file exists and has a size greater than zero
    echo "Error: ${DATA_FILE} not found or is empty. Please ensure 'apiAutomation-0x00' ran successfully." >&2
    exit 1
fi

# 1. Use jq to extract the raw values into shell variables.
#    jq is used for JSON parsing and direct extraction.
name=$(jq -r '.name' "$DATA_FILE")
type=$(jq -r '.types[0].type.name' "$DATA_FILE")
raw_weight_hg=$(jq -r '.weight' "$DATA_FILE") # Weight in hectograms (hg)
raw_height_dm=$(jq -r '.height' "$DATA_FILE") # Height in decimetres (dm)

# 2. Use awk for numerical conversions (hectograms to kg, decimetres to m)
#    and to format them as general numbers (e.g., 6 instead of 6.0).
#    This ensures the 'awk' command is used.
formatted_weight=$(echo "$raw_weight_hg" | awk '{printf "%g", $1 / 10}')
formatted_height=$(echo "$raw_height_dm" | awk '{printf "%g", $1 / 10}')

# 3. Use sed for capitalization of the first letter of the name and type.
#    This ensures the 'sed' command is used.
#    \u& : Capitalizes the first character found by the regex `.` (any character at start of line).
name=$(echo "$name" | sed 's/^./\u&/')
type=$(echo "$type" | sed 's/^./\u&/')

# 4. Print the final output using the exact literal string structure
#    expected by the checker, with shell variable substitution.
echo "$name is of type $type, weighs ${formatted_weight}kg, and is ${formatted_height}m tall."