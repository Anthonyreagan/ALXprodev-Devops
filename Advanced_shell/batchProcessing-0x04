#!/bin/bash

# Configuration
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")
API_BASE="https://pokeapi.co/api/v2/pokemon"
OUTPUT_DIR="pokemon_data"
MAX_PARALLEL=3  # Limit concurrent requests
DELAY=1         # Delay between batches

# Initialize
mkdir -p "$OUTPUT_DIR"
declare -A PID_MAP  # Track process IDs

# Cleanup function
cleanup() {
    echo "Cleaning up..."
    kill $(jobs -p) 2>/dev/null
    exit 1
}
trap cleanup SIGINT SIGTERM

# Fetch function to be run in background
fetch_pokemon() {
    local pokemon=$1
    local output_file="$OUTPUT_DIR/${pokemon}.json"
    
    if curl -s -f "${API_BASE}/${pokemon}" -o "$output_file"; then
        echo "✅ Success: $pokemon"
    else
        echo "❌ Failed: $pokemon"
        rm -f "$output_file" 2>/dev/null
    fi
}

# Main processing
echo "Starting parallel fetch for ${#POKEMON_LIST[@]} Pokémon..."
for pokemon in "${POKEMON_LIST[@]}"; do
    while [ $(jobs -r | wc -l) -ge $MAX_PARALLEL ]; do
        sleep 0.1  # Wait if we've hit max parallel processes
    done
    
    echo "🔄 Fetching $pokemon..."
    fetch_pokemon "$pokemon" &
    PID_MAP[$!]=$pokemon  # Store PID with Pokémon name
    sleep $DELAY  # Rate limiting between process starts
done

# Wait for all background processes
echo "Waiting for all processes to complete..."
wait

# Verification
success_count=0
for pokemon in "${POKEMON_LIST[@]}"; do
    if [ -f "$OUTPUT_DIR/${pokemon}.json" ]; then
        ((success_count++))
    fi
done

echo "Processing complete!"
echo "Successfully fetched $success_count/${#POKEMON_LIST[@]} Pokémon"
